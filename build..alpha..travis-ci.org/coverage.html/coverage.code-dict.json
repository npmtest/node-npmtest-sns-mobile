{"/home/travis/build/npmtest/node-npmtest-sns-mobile/test.js":"/* istanbul instrument in package npmtest_sns_mobile */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sns-mobile/lib.npmtest_sns_mobile.js":"/* istanbul instrument in package npmtest_sns_mobile */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sns_mobile = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sns_mobile = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sns-mobile/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sns-mobile && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sns_mobile */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sns_mobile\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sns_mobile.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sns_mobile.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sns_mobile.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sns_mobile.__dirname + '/lib.npmtest_sns_mobile.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sns-mobile/node_modules/sns-mobile/index.js":"module.exports = require('./lib/interface.js');","/home/travis/build/npmtest/node-npmtest-sns-mobile/node_modules/sns-mobile/lib/interface.js":"'use strict';\n\nmodule.exports = Interface;\n\nvar SUPPORTED_PLATFORMS = {\n  ANDROID: 'ANDROID',\n  IOS: 'IOS',\n  KINDLE_FIRE: 'KINDLE_FIRE',\n  // For bc with older versions\n  android: 'android',\n  ios: 'ios'\n};\n\nvar EMITTED_EVENTS = {\n  BROADCAST_START: 'broadcastStart',\n  BROADCAST_END: 'broadcastEnd',\n  SENT_MESSAGE: 'messageSent',\n  DELETED_USER: 'userDeleted',\n  FAILED_SEND: 'sendFailed',\n  ADDED_USER: 'userAdded',\n  ADD_USER_FAILED: 'addUserFailed',\n  ATTRIBUTES_UPDATED: 'attributesUpdated',\n  ATTRIBUTES_UPDATE_FAILED: 'attributesUpdateFailed',\n  TOPIC_CREATED: 'topicCreated',\n  CREATE_TOPIC_FAILED: 'createTopicFailed',\n  TOPIC_DELETED: 'topicDeleted',\n  DELETE_TOPIC_FAILED: 'deleteTopicFailed',\n  SUBSCRIBED: 'subscribed',\n  SUBSCRIBE_FAILED: 'subscribeFailed',\n  UNSUBSCRIBED: 'unsubscribed',\n  UNSUBSCRIBE_FAILED: 'unsubscribeFailed',\n  PUBLISH_FAILED: 'publishFailed',\n  PUBLISHED_MESSAGE: 'publishedMessage'\n};\n\nvar async = require('async')\n  , util = require('util')\n  , events = require('events')\n  , AWS = require('aws-sdk');\n\n/**\n * @constructor\n * Interface to use SNS Push Notifications\n * @param   {Object} opts\n * @return  {Interface}\n */\n\nfunction Interface(opts) {\n  if (!deviceSupported(opts.platform)) {\n    var e = util.format('Unsupported platform option, \"%s\". Please provide ' +\n      'a platform from SNS.SUPPORTED_PLATFORMS', opts.platform);\n\n    throw new Error(e);\n  }\n\n  this.platformApplicationArn = opts.platformApplicationArn;\n  this.platform = opts.platform;\n  this.sandbox = opts.sandbox;\n\n  if (opts.sns) {\n    if (\n      opts.sns instanceof AWS.SNS ||\n      (opts.sns.createPlatformEndpoint && opts.sns.getEndpointAttributes)\n    ){\n      this.sns = opts.sns;\n    } else {\n      this.sns = new AWS.SNS(opts.sns);\n    }\n  } else {\n    this.sns = new AWS.SNS({\n      region: opts.region,\n      apiVersion: opts.apiVersion,\n      accessKeyId: opts.accessKeyId,\n      secretAccessKey: opts.secretAccessKey\n    });\n  }\n\n  events.EventEmitter.call(this);\n}\n\nutil.inherits(Interface, events.EventEmitter);\n\nInterface.EVENTS = EMITTED_EVENTS;\nInterface.SUPPORTED_PLATFORMS = SUPPORTED_PLATFORMS;\n\n\n/**\n * Returns the PlatformApplicationArn for this instance.\n * @return {String}\n */\n\nInterface.prototype.getPlatformApplicationArn = function() {\n  return this.platformApplicationArn;\n};\n\n\n/**\n * Returns the region for this instance.\n * @return {String}\n */\n\nInterface.prototype.getRegion = function() {\n  return this.sns.config.region;\n};\n\n\n/**\n * Returns the AWS api version for this instance.\n * @return {String}\n */\n\nInterface.prototype.getApiVersion = function() {\n  return this.sns.config.apiVersion;\n};\n\n\n/**\n * Add a user to the service.\n * @param {String}    deviceId\n * @param {String}    platform\n * @param {String}    [customUserData]\n * @param {Function}  callback\n */\n\nInterface.prototype.addUser = function(deviceId, customUserData, callback) {\n  if (!callback) {\n    callback = customUserData;\n  }\n\n  var params = {\n    PlatformApplicationArn: this.getPlatformApplicationArn(),\n    Token: deviceId,\n  };\n\n  if(customUserData) {\n    params.CustomUserData = customUserData;\n  }\n\n  var self = this;\n  this.sns.createPlatformEndpoint(params, function(err, res) {\n    if (!err) {\n      self.emit(EMITTED_EVENTS.ADDED_USER, res.EndpointArn, deviceId);\n    } else {\n      self.emit(EMITTED_EVENTS.ADD_USER_FAILED, deviceId, err);\n    }\n    return callback(err, ((res && res.EndpointArn) ? res.EndpointArn : null));\n  });\n};\n\n\n/**\n * Get a user by their EndpointArn\n * @param {String}    endpointArn\n * @param {Function}  callback\n */\n\nInterface.prototype.getUser = function(endpointArn, callback) {\n  this.sns.getEndpointAttributes({\n    EndpointArn: endpointArn\n  }, function(err, res) {\n    if (err) {\n      return callback(err, null);\n    }\n\n    res.EndpointArn = endpointArn;\n    return callback(null, res);\n  });\n};\n\n\n/**\n * Set a user's attributes by their EndpointArn\n * @param {String}    endpointArn\n * @param {Object}    attributes  An object that can contain string properties\n *                                for CustomUserData, Enabled and Token\n * @param {Function}  callback\n */\n\nInterface.prototype.setAttributes =\n  function (endpointArn, attributes, callback) {\n    var self = this;\n    var attributesType = typeof(attributes);\n    if (attributesType == 'object') {\n      try {\n        if (typeof attributes.CustomUserData == 'object') {\n          attributes.CustomUserData = JSON.stringify(attributes.CustomUserData);\n        }\n      } catch (e) {\n        return callback(e, null);\n      }\n    } else {\n      return callback(\n        new Error('Expected second parameter to be of type object (' +\n          attributesType + ' supplied).'), null);\n    }\n    var params = {\n      EndpointArn: endpointArn,\n      Attributes: attributes\n    };\n    this.sns.setEndpointAttributes(params, function(err) {\n      if (!err) {\n        self.emit(EMITTED_EVENTS.ATTRIBUTES_UPDATED, endpointArn, attributes);\n      } else {\n        self.emit(EMITTED_EVENTS.ATTRIBUTES_UPDATE_FAILED, endpointArn, err);\n      }\n      return callback(err, attributes);\n    });\n  };\n\n\n/**\n * Return a list of users.\n * @param {Function}  callback\n * @param {String}    nextToken\n */\n\nInterface.prototype.getUsers = function(callback) {\n  var users = [];\n\n  var self = this;\n  this._getUsers(null, function(err, res) {\n    if (err) {\n      return callback(err, null);\n    }\n    var nextToken = res.NextToken;\n    users = users.concat(res.Endpoints);\n\n    async.whilst(function() {\n      // Only keep going so long as we have a token\n      return (typeof nextToken !== 'undefined' && nextToken !== null);\n    }, function(cb) {\n      self._getUsers(nextToken, function(err, res) {\n        if (err) {\n          return cb(err);\n        }\n\n        nextToken = res.NextToken;\n        users = users.concat(res.Endpoints);\n        cb();\n      });\n    }, function(err) {\n      return callback(err, users);\n    });\n  });\n};\n\n\n/**\n * Return a list of users.\n * @param {Function}  callback\n * @param {String}    nextToken\n */\n\nInterface.prototype._getUsers = function(nextToken, callback) {\n  var params = {\n    PlatformApplicationArn: this.getPlatformApplicationArn()\n  };\n\n  if (nextToken) {\n    params.NextToken = nextToken;\n  }\n\n  this.sns.listEndpointsByPlatformApplication(params, callback);\n};\n\n\n/**\n * Get applications with the given NextToken (for paging).\n * @param {String}    nextToken\n * @param {Function}  callback\n */\n\nInterface.prototype._getApplications = function(nextToken, callback) {\n  var params = {};\n\n  if (nextToken) {\n    params.NextToken = nextToken;\n  }\n\n  this.sns.listPlatformApplications(params, callback);\n};\n\n\n/**\n * Get all users for this account.\n * @param {Function} calback\n */\n\nInterface.prototype.getApplications = function(callback) {\n  var applications = [];\n\n  var self = this;\n  this._getApplications(null, function(err, res) {\n    if (err) {\n      return callback(err, null);\n    }\n    var nextToken = res.NextToken;\n    applications = applications.concat(res.PlatformApplications);\n\n    async.whilst(function() {\n      // Only keep going so long as we have a token\n      return (typeof nextToken !== 'undefined' && nextToken !== null);\n    }, function(cb) {\n      self._getApplications(nextToken, function(err, res) {\n        if (err) {\n          return cb(err);\n        }\n\n        nextToken = res.NextToken;\n        applications = applications.concat(res.PlatformApplications);\n        cb();\n      });\n    }, function(err) {\n      return callback(err, applications);\n    });\n  });\n};\n\n\n/**\n * Get applications with the given NextToken (for paging).\n * @param {String}    nextToken\n * @param {Function}  callback\n */\n\nInterface.prototype._getApplications = function(nextToken, callback) {\n  var params = {};\n\n  if (nextToken) {\n    params.NextToken = nextToken;\n  }\n\n  this.sns.listPlatformApplications(params, callback);\n};\n\n\n\n/**\n * Delete a user from the service.\n * @param {String}    endpointArn\n * @param {Function}  callback\n */\n\nInterface.prototype.deleteUser = function(endpointArn, callback) {\n  var self = this;\n\n  this.sns.deleteEndpoint({\n    EndpointArn: endpointArn\n  }, function(err) {\n    if (!err) {\n      self.emit(EMITTED_EVENTS.DELETED_USER, endpointArn);\n    }\n    return callback(err);\n  });\n};\n\n\n/**\n * Create a topic.\n * @param {String}    name\n * @param {Function}  callback\n */\n\nInterface.prototype.createTopic = function(name, callback) {\n  var params = {\n    Name: name\n  };\n  var self = this;\n  self.sns.createTopic(params, function(err, res) {\n    if (err) {\n      self.emit(EMITTED_EVENTS.CREATE_TOPIC_FAILED, name, err);\n      return callback(err);\n    }\n    if (!res || !res.TopicArn) {\n      return callback(new Error('Response or TopicArn is null'));\n    }\n    self.emit(EMITTED_EVENTS.TOPIC_CREATED, res.TopicArn, name);\n    callback(null, res.TopicArn);\n  });\n};\n\n\n/**\n * Delete a topic.\n * @param {String}    topicArn\n * @param {Function}  callback\n */\n\nInterface.prototype.deleteTopic = function(topicArn, callback) {\n  var params = {\n    TopicArn: topicArn\n  };\n  var self = this;\n  self.sns.deleteTopic(params, function(err) {\n    if (err) {\n      self.emit(EMITTED_EVENTS.DELETE_TOPIC_FAILED, topicArn, err);\n      return callback(err);\n    }\n    self.emit(EMITTED_EVENTS.TOPIC_DELETED, topicArn);\n    callback();\n  });\n};\n\n\n/**\n * Get all topics for this account.\n * @param {Function} callback\n */\n\nInterface.prototype.getTopics = function(callback) {\n  var topics = [];\n  var self = this;\n  var nextToken;\n  async.doWhilst(function(next) {\n    self._getTopics(nextToken, function(err, res) {\n      if (err) {\n        return next(err);\n      }\n      nextToken = res.NextToken;\n      if (res.Topics && res.Topics.length) {\n        topics = topics.concat(res.Topics);\n      }\n      next();\n    });\n  }, function() {\n    return !!nextToken;\n  }, function(err) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, topics);\n  });\n};\n\n\n/**\n * Get topics with the given NextToken (for paging).\n * @param {String}    nextToken\n * @param {Function}  callback\n */\n\nInterface.prototype._getTopics = function(nextToken, callback) {\n  var params = {};\n  if (nextToken) {\n    params.NextToken = nextToken;\n  }\n  this.sns.listTopics(params, callback);\n};\n\n\n/**\n * Get subscriptions; either all subscriptions for this account or those for\n * the topic ARN specified.\n * @param {String}    topicArn\n * @param {Function}  callback\n */\n\nInterface.prototype.getSubscriptions = function(topicArn, callback) {\n  if (typeof topicArn === 'function') {\n    callback = topicArn;\n    topicArn = undefined;\n  }\n  var subscriptions = [];\n  var self = this;\n  var nextToken;\n  async.doWhilst(function(next) {\n    self._getSubscriptions(nextToken, topicArn, function(err, res) {\n      if (err) {\n        return next(err);\n      }\n      nextToken = res.NextToken;\n      if (res.Subscriptions && res.Subscriptions.length) {\n        subscriptions = subscriptions.concat(res.Subscriptions);\n      }\n      next();\n    });\n  }, function() {\n    return !!nextToken;\n  }, function(err) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, subscriptions);\n  });\n};\n\n\n/**\n * Get subscriptions with the given NextToken (for paging).\n * @param {String}    nextToken\n * @param {String}    topicArn\n * @param {Function}  callback\n */\n\nInterface.prototype._getSubscriptions =\n  function (nextToken, topicArn, callback) {\n    var params = {};\n    if (nextToken) {\n      params.NextToken = nextToken;\n    }\n    if (!topicArn) {\n      this.sns.listSubscriptions(params, callback);\n      return;\n    }\n    params.TopicArn = topicArn;\n    this.sns.listSubscriptionsByTopic(params, callback);\n  };\n\n\n/**\n * Subscribe an endpoint to a topic.\n * @param {String}    endpointArn\n * @param {String}    topicArn\n * @param {Function}  callback\n */\n\nInterface.prototype.subscribe = function(endpointArn, topicArn, callback) {\n  var params = {\n    Endpoint: endpointArn,\n    TopicArn: topicArn,\n    Protocol: 'application'\n  };\n  var self = this;\n  self.sns.subscribe(params, function(err, res) {\n    if (err) {\n      self.emit(EMITTED_EVENTS.SUBSCRIBE_FAILED, endpointArn, topicArn, err);\n      return callback(err);\n    }\n    if (!res || !res.SubscriptionArn) {\n      return callback(new Error('Response or SubscriptionArn is null'));\n    }\n    self.emit(\n      EMITTED_EVENTS.SUBSCRIBED,\n      res.SubscriptionArn,\n      endpointArn,\n      topicArn\n    );\n    callback(null, res.SubscriptionArn);\n  });\n};\n\n\n/**\n * Unsubscribe an endpoint from a topic via its SubscriptionArn.\n * @param {String}    subscriptionArn\n * @param {Function}  callback\n */\n\nInterface.prototype.unsubscribe = function(subscriptionArn, callback) {\n  var params = {\n    SubscriptionArn: subscriptionArn\n  };\n  var self = this;\n  self.sns.unsubscribe(params, function(err) {\n    if (err) {\n      self.emit(EMITTED_EVENTS.UNSUBSCRIBE_FAILED, subscriptionArn, err);\n      return callback(err);\n    }\n    self.emit(EMITTED_EVENTS.UNSUBSCRIBED, subscriptionArn);\n    callback();\n  });\n};\n\n\n/**\n * Publish a message to a topic identified by its topic ARN.\n * Message is JSON object.\n * @param {String}    topicArn\n * @param {Object}    message\n * @param {Function}  callback\n */\n\nInterface.prototype.publishToTopic = function(topicArn, message, callback) {\n  if (!validateMessageStructure(message)) {\n    return callback(\n      new Error(\n        'Argument \"message\" must be in SNS multi-platform publishing format.'\n      )\n    );\n  }\n\n  var self = this;\n  self.sns.publish({\n    Message: JSON.stringify(message),\n    TopicArn: topicArn,\n    MessageStructure: 'json',\n  }, function(err, res) {\n    if (err) {\n      self.emit(EMITTED_EVENTS.PUBLISH_FAILED, topicArn, err);\n      return callback(err);\n    }\n    if (!res || !res.MessageId) {\n      return callback(new Error('Response or MessageId is null'));\n    }\n    self.emit(EMITTED_EVENTS.PUBLISHED_MESSAGE, topicArn, res.MessageId);\n    callback(null, res.MessageId);\n  });\n\n  function validateMessageStructure(message) {\n    if (!message.default) {\n      return false;\n    }\n    if (typeof message.default !== 'string') {\n      return false;\n    }\n    return true;\n  }\n};\n\n\n/**\n * Send a message to an Android or iOS device identified by its Endpoint ARN.\n * Message is JSON object.\n * @param {String}    endpointArn\n * @param {Object}    message\n * @param {Function}  callback\n */\n\nInterface.prototype.sendMessage = function(endpointArn, msg, callback) {\n  var self = this\n    , convertFn = null;\n\n  if (this.platform === SUPPORTED_PLATFORMS.ANDROID ||\n      this.platform === SUPPORTED_PLATFORMS.KINDLE_FIRE) {\n    convertFn = this.convertToGcmFormat;\n  } else if (this.platform === SUPPORTED_PLATFORMS.IOS) {\n    convertFn = this.convertToApnsFormat;\n  } else {\n    var e = util.format('Unsupported platform detected, \"%s\". Please use a ' +\n      'platform on SNS.SUPPORTED_PLATFORMS', this.platform);\n\n    throw new Error(e);\n  }\n\n  convertFn.call(this, msg, function (err, message) {\n    try {\n      self.sns.publish({\n        Message: JSON.stringify(message),\n        TargetArn: endpointArn,\n        MessageStructure: 'json',\n      }, function(err, res) {\n        if (err) {\n          self.emit(EMITTED_EVENTS.FAILED_SEND, endpointArn, err);\n        } else {\n          self.emit(EMITTED_EVENTS.SENT_MESSAGE, endpointArn, res.MessageId);\n        }\n\n        return callback(err, ((res && res.MessageId) ? res.MessageId : null));\n      });\n    } catch (e) {\n      return callback(e, null);\n    }\n  });\n};\n\n\nInterface.prototype._broadcastMessage = function(endpoints, message, callback) {\n  var self = this;\n\n  async.each(endpoints, function(endpoint, cb) {\n    self.sendMessage(endpoint.EndpointArn, message, function() {\n      cb();\n    });\n  }, callback);\n};\n\n\n/**\n * Broadcast a message to all endpoints.\n * Message send errors are ignored.\n * @param {String}    message\n * @param {Function}  callback\n */\nInterface.prototype.broadcastMessage = function(message, callback) {\n  var self = this;\n  this._getUsers(null, function(err, res) {\n    if (err) {\n      return callback(err, null);\n    }\n    var nextToken = res.NextToken;\n\n    self.emit(EMITTED_EVENTS.BROADCAST_START);\n\n    self._broadcastMessage(res.Endpoints, message, function() {\n      async.whilst(function() {\n        // Only keep going so long as we have a token\n        return (typeof nextToken !== 'undefined' && nextToken !== null);\n      }, function(cb) {\n        self._getUsers(nextToken, function(err, res) {\n          if (err) {\n            return cb(err);\n          }\n\n          nextToken = res.NextToken;\n          self._broadcastMessage(res.Endpoints, message, cb);\n        });\n      }, function(err) {\n        self.emit(EMITTED_EVENTS.BROADCAST_END);\n        return callback(err);\n      });\n    });\n  });\n};\n\n\n/**\n * Check is the provided platform supported.\n * @param   {String} platform\n * @return  {Boolean}\n */\n\nfunction deviceSupported(platform) {\n  return SUPPORTED_PLATFORMS.hasOwnProperty(platform);\n}\n\nInterface.deviceSupported = deviceSupported;\n\n\n/**\n * Convert a provided message to GCM format\n * @param   {String/Object} message\n * @return  {String}\n */\n\nInterface.prototype.convertToGcmFormat = function(message, callback) {\n  // GCM format expected by amazon for messages\n  // {\n  //   GCM: JSON.stringify({\n  //     data: {\n  //       message:\"<message>\"\n  //     }\n  //   })\n  // }\n\n  var container = {}\n    , key = (this.platform === SUPPORTED_PLATFORMS.ANDROID) ? 'GCM' : 'ADM';\n\n  if (typeof message === 'string') {\n    try {\n      container[key] = JSON.stringify({\n        data: {\n          message: message\n        }\n      });\n\n      callback(null, container);\n    } catch (e) {\n      callback(e, null);\n    }\n  } else if (message && typeof message === 'object') {\n    if (message.GCM || message.ADM || message.default) {\n      callback(null, message);\n    } else {\n      try {\n        container[key] = JSON.stringify(message);\n\n        callback(null, container);\n      } catch (e) {\n        callback(e, null);\n      }\n    }\n  } else {\n    var e = new Error('Unable to convert message to ADM/GCM format. Message ' +\n      'must be String/Object.');\n\n    callback(e, null);\n  }\n};\n\n\n/**\n * Convert a message to APNS format\n * @param   {String/Object} message\n * @return  {String}\n */\n\nInterface.prototype.convertToApnsFormat = function (message, callback) {\n  // APNS format expected by amazon for messages\n  // {\n  //   APNS: JSON.stringify({\n  //     \"aps\": {\n  //       \"alert\": \"<message>\"\n  //     }\n  //   })\n  // }\n\n  var APNS = this.sandbox ? 'APNS_SANDBOX' : 'APNS'\n    , messageContainer = {};\n\n  if (typeof message === 'string') {\n    try {\n      messageContainer[APNS] = JSON.stringify({\n        aps: {\n          alert: message\n        }\n      });\n\n      callback(null, messageContainer);\n    } catch (e) {\n      callback(e, null);\n    }\n  } else if (message !== null && typeof message === 'object') {\n    if (message['APNS_SANDBOX'] || message['APNS']) {\n      callback(null, message);\n    } else {\n      try {\n        messageContainer[APNS] = JSON.stringify(message);\n        callback(null, messageContainer);\n      } catch (e) {\n        callback(e, null);\n      }\n    }\n  } else {\n    var e = new Error('Unable to convert message to APNS format. Message' +\n      ' must be String/Object.');\n\n    callback(e, null);\n  }\n};\n"}